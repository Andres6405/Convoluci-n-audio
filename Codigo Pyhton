import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt

# Cargar la señal de entrada
fs, input_signal = wavfile.read('Voz-004.wav')  #  archivo .wav
input_signal = input_signal / np.max(np.abs(input_signal))  # Normalizar

# Diseño de la respuesta al impulso filtro pasa bajas
fc = 1300  # Frecuencia de corte en Hz
num_taps = 600  # Longitud del filtro
t = np.arange(-num_taps // 2, num_taps // 2 + 1) / fs
h = np.sinc(2 * fc * t)  # Respuesta al impulso de un filtro ideal
h = h * np.hamming(len(h))  # Aplicar ventana Hamming para suavizar
h /= np.sum(h)  # Normalizar para preservar la amplitud

# Implementación manual de la convolución
output_signal = np.zeros(len(input_signal))  # Señal de salida inicializada en ceros
for n in range(len(input_signal)):
    for k in range(len(h)):
        if 0 <= n - k < len(input_signal):  # Evitar accesos fuera del rango
            output_signal[n] += input_signal[n - k] * h[k]

# Guardar la señal procesada
output_signal = (output_signal * 32767).astype(np.int16)  # Escalar a 16 bits
wavfile.write('output_audio_manual.wav', fs, output_signal)

# Función para calcular y devolver el espectro de frecuencias
def compute_spectrum(signal, fs):
    n = len(signal)
    spectrum = np.abs(np.fft.fft(signal))[:n // 2]  # Magnitud del FFT (sólo la mitad positiva)
    freqs = np.fft.fftfreq(n, d=1/fs)[:n // 2]  # Frecuencias correspondientes
    return freqs, spectrum

# Calcular espectros de frecuencias
freqs_original, spectrum_original = compute_spectrum(input_signal, fs)
freqs_filtered, spectrum_filtered = compute_spectrum(output_signal, fs)

# Visualización de las señales en el dominio del tiempo
plt.figure(figsize=(12, 12))

# Visualizar la señal original en el dominio del tiempo
plt.subplot(4, 1, 1)
plt.plot(input_signal, label='Señal Original', color='blue')
plt.title('Señal Original en el Dominio del Tiempo')
plt.xlabel('Muestras')
plt.ylabel('Amplitud')
plt.legend()

# Visualizar la señal filtrada en el dominio del tiempo
plt.subplot(4, 1, 2)
plt.plot(output_signal, label='Señal Filtrada', color='orange')
plt.title('Señal Filtrada en el Dominio del Tiempo')
plt.xlabel('Muestras')
plt.ylabel('Amplitud')
plt.legend()

# Visualizar el espectro de frecuencias de la señal original
plt.subplot(4, 1, 3)
plt.plot(freqs_original, spectrum_original, label='Espectro Original', color='blue')
plt.title('Espectro de Frecuencias de la Señal Original')
plt.xlabel('Frecuencia (Hz)')
plt.ylabel('Magnitud')
plt.legend()

# Visualizar el espectro de frecuencias de la señal filtrada
plt.subplot(4, 1, 4)
plt.plot(freqs_filtered, spectrum_filtered, label='Espectro Filtrado', color='orange')
plt.title('Espectro de Frecuencias de la Señal Filtrada')
plt.xlabel('Frecuencia (Hz)')
plt.ylabel('Magnitud')
plt.legend()

plt.tight_layout()
plt.show()
